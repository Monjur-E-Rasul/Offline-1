#include<iostream>
#include<cstdlib>
#include<sstream>
using namespace std;
class Element
{
private:
    Element * next;
    Element * prev;
    int value;
public:
    void setNext(Element *n)
    {
        next = n;
    }
    Element * getNext()
    {
        return next;
    } void setPrev(Element *p)
    {
        prev = p;
    } Element * getPrev()
    {
        return prev;
    } void setValue(int v)
    {
        value = v;
    } int getValue()
    {
        return value;
    }
};
class LinkedListBase
{
protected:
    Element * head;
    Element * tail;
    int size;
public:
    LinkedListBase()
    {
        head=new Element;
        tail=new Element;
        head->setNext(tail);
        tail->setPrev(head);
        size = 0;
    } int getSize()
    {
        return size;
    } ~LinkedListBase()
    {
        delete head;
        delete tail;
    }
};
class LinkedList: public LinkedListBase
{
public:
    void add(Element *e)
    {
        if(size==0)
        {
            head->setNext(e);
            e->setNext(tail);
            e->setPrev(head);
            tail->setPrev(e);
            size++;
        }
        else
        {
            e->setPrev(tail->getPrev());
            tail->getPrev()->setNext(e);
            e->setNext(tail);
            tail->setPrev(e);
            size++;
        }
    } Element getFirst()
    {
        return *head->getNext();
    } Element getLast()
    {
        return *tail->getPrev();
    } int size1()
    {
        return getSize();
    } void add(int index, Element *e)
    {
        if(index>size) return;
        else if(index==0 && size==0)//empty list
        {
            head->setNext(e);
            e->setNext(tail);
            e->setPrev(head);
            tail->setPrev(e);
            size++;
        }
        else if(index==0 && size!=0)
        {
            e->setPrev(head);
            e->setNext(head->getNext());
            head->getNext()->setPrev(e);
            head->setNext(e);
            size++;
        }
        else if(size!=0 && index == (size))
        {
            e->setPrev(tail->getPrev());
            tail->getPrev()->setNext(e);
            e->setNext(tail);
            tail->setPrev(e);
            size++;
        }
        else
        {
            Element *d,*p;
            int c;
            c=0;
            d=new Element;
            p=new Element;
            d=head->getNext();
            while(c!=index)
            {
                p=d;
                d=d->getNext();
                c++;
            }
            p->setNext(e);
            e->setPrev(p);
            e->setNext(d);
            d->setPrev(e);
            size++;
        }
    } void addFirst(Element *e)
    {
        if(size==0)
        {
            head->setNext(e);
            e->setNext(tail);
            e->setPrev(head);
            tail->setPrev(e);
            size++;
        }
        else
        {
            e->setPrev(head);
            e->setNext(head->getNext());
            head->getNext()->setPrev(e);
            head->setNext(e);
            size++;
        }
    }
    int indexOf(Element *e)
    {
        Element *d=new Element;
        int c;
        c=0;
        d=head->getNext();
        while(d!=tail)
        {
            if(d->getValue()==e->getValue()) return c;
            d=d->getNext();
            c++;
        }
        return -1;
    }
    int lastIndexOf(Element *e)
    {
        Element *d=new Element;
        int c;
        c=0;
        d=tail->getPrev();
        while(d!=head)
        {
            if(d->getValue()==e->getValue()) return (size-1-c);
            d=d->getPrev();
            c++;
        }
        return -1;
    }
    bool contains(Element *e)
    {
        Element *d;
        d=new Element;
        d=head->getNext();
        while(d!=tail)
        {
            if (d->getValue()== e->getValue())
            {
                return 1;
                break ;
            }
            d=d->getNext();
        }
        return 0;
    }
    Element get(int index)
    {
        if(index<size && index>=0)
        {
            if(index==0) return *head->getNext();
            else if(index==size-1) return *tail->getPrev();
            else
            {
                Element *d;
                int c;
                c=0;
                d=new Element;
                d=head->getNext();
                while(c!=size)
                {
                    if(c==index)
                    {
                        return *d;
                    }
                    d=d->getNext();
                    c++;
                }
            }
        }
        else cout<<" invalid "<<endl;
    }
    void addLast(Element *e)
    {
        add(e);
    }
    Element removeFirst()
    {
        Element *del=new Element;
        del=head->getNext();
        head=head->getNext();
        size--;
        return *del;
    }
    Element removeLast()
    {
        Element *del=new Element;
        del=tail->getPrev();
        tail=tail->getPrev();
        size--;
        return *del;
    }
    Element removeAt(int index)
    {
        Element *del=new Element;
        if(index==0)
        {
            del=head->getNext();
            head=head->getNext();
            size--;
            return *del;
        }
        else if(index==size-1)
        {
            del=tail->getPrev();
            tail=tail->getPrev();
            size--;
            return *del;
        }
        else
        {
            Element *e=new Element;
            Element *p=new Element;
            int c;
            c=0;
            e=head->getNext();
            while(c!=index)
            {
                p=e;
                e=e->getNext();
                c++;
            }
            del=e;
            p->setNext(del->getNext());
            del->getNext()->setPrev(p);
            size--;
            return *del;
        }
    }
    bool remove1st(Element *e)
    {
        int c;
        Element *del=new Element;
        c = indexOf(e);
        if(contains(e)==0) return 0;
        else if(c==0)
        {
            del=head->getNext();
            head=head->getNext();
            size--;
            return 1;
        }
        else if(c==size-1)
        {
            del=tail->getPrev();
            tail=tail->getPrev();
            size--;
            return 1;
        }
        else
        {
            Element *d=new Element;
            Element *p=new Element;
            int m;
            m=0;
            d=head->getNext();
            while(m!=c)
            {
                p=d;
                d=d->getNext();
                m++;
            }
            del=d;
            p->setNext(del->getNext());
            del->getNext()->setPrev(p);
            size--;
            return 1;
        }
    }
    bool removeFirstOccurrence(Element *e)
    {
        remove1st(e);
    }
    bool removeLastOccurrence(Element *e)
    {
        int c;
        if(contains(e)==0) return 0;
        c=lastIndexOf(e);
        Element *del=new Element;
        if(c==0)
        {
            del=head->getNext();
            head=head->getNext();
            size--;
            return 1;
        }
        else if(c==size-1)
        {
            del=tail->getPrev();
            tail=tail->getPrev();
            size--;
            return 1;
        }
        else
        {
            Element *d=new Element;
            Element *p=new Element;
            int m;
            m=0;
            d=head->getNext();
            while(m!=c)
            {
                p=d;
                d=d->getNext();
                m++;
            }
            del=d;
            p->setNext(del->getNext());
            del->getNext()->setPrev(p);
            size--;
            return 1;
        }
    }
    void clear()
    {
        int i,j;
        j=size;
        for(i=0; i<j; i++)
        {
            removeFirst();
        }
    }
    bool isEmpty()
    {
        if(size==0) return 1;
        return 0;
    }
    string toString()
    {
        Element *d=new Element;
        d=head->getNext();
        ostringstream ss("");
        for(int i=0; i<size; i++)
        {
            ss<<d->getValue();
            if(i==size-1) break;
            ss<<",";
            d=d->getNext();
        }
        return ss.str();
    }
    void print()
    {
        if(size!=0)
        {
            Element *e;
            e= new Element;
            e=head->getNext();
            while(e!=tail)
            {
                cout<<e->getValue()<<" ";
                e=e->getNext();
            }
            cout<<"\n";
        }
        else return;
    }
}; // a very simple main
int main()
{
    LinkedList ll;
    while(1)
    {
        cout<<"1. Insert add. 2. Get size. 3. Insert first. 4. Insert Last."<<endl;
        cout<<"5. Get first. 6. Get Last. 7. Insert in position. 8.Search."<<endl;
        cout<<"9.Return Item of position. 10. Print. 11. Get First index."<<endl;
        cout<<"12. Get Last index 13. Remove first. 14. Remove last."<<endl;
        cout<<"15. Remove At. 16. Bool remove. 17.Bool remove2. 18.Last occ remove"<<endl;
        cout<<"19.Empty check. 20. Clear list. 21. To String "<<endl;
        int ch;
        cin>>ch;
        if(ch==1)
        {
            Element *o1;
            o1= new Element;
            int val;
            cin>>val;
            o1->setValue(val);
            ll.add(o1);
        }
        else if(ch==2)
        {
            cout<<ll.size1()<<endl;
        }
        else if(ch==3)
        {
            Element *o1;
            o1= new Element;
            int val;
            cin>>val;
            o1->setValue(val);
            ll.addFirst(o1);
        }
        else if(ch==4)
        {
            Element *o1;
            o1= new Element;
            int val;
            cin>>val;
            o1->setValue(val);
            ll.addLast(o1);
        }
        else if(ch==5)
        {
            Element e = ll.getFirst();
            cout<<e.getValue()<<endl;
        }
        else if(ch==6)
        {
            Element e = ll.getLast();
            cout<<e.getValue()<<endl;
        }
        else if(ch==7)
        {
            Element *e;
            int val,idx;
            e= new Element;
            cin>>idx;
            cout<<endl;
            cin>>val;
            e->setValue(val);
            ll.add(idx,e);
        }
        else if(ch==8)
        {
            Element *o1;
            int val;
            bool c;
            o1=new Element;
            cin>>val;
            o1->setValue(val);
            c=ll.contains(o1);
            cout<<c<<endl;
        }
        else if(ch==9)
        {
            int idx;
            cin>>idx;
            Element e = ll.get(idx);
            cout<<e.getValue()<<endl;
        }
        else if(ch==10)
        {
            ll.print();
        }
        else if(ch==11)
        {
            Element *o1=new Element;
            int val;
            cin>>val;
            o1->setValue(val);
            cout<<ll.indexOf(o1)<<endl;
        }
        else if(ch==12)
        {
            Element *o1=new Element;
            int val;
            cin>>val;
            o1->setValue(val);
            cout<<ll.lastIndexOf(o1)<<endl;
        }
        else if(ch==13)
        {
            Element e = ll.removeFirst();
            cout<<e.getValue()<<endl;
        }
        else if(ch==14)
        {
            Element e = ll.removeLast();
            cout<<e.getValue()<<endl;
        }
        else if(ch==15)
        {
            int idx;
            cin>>idx;
            Element e = ll.removeAt(idx);
            cout<<e.getValue()<<endl;
        }
        else if(ch==16)
        {
            Element *o1;
            int val;
            bool c;
            o1=new Element;
            cin>>val;
            o1->setValue(val);
            c=ll.remove1st(o1);
            cout<<c<<endl;
        }
        else if(ch==17)
        {
            Element *o1;
            int val;
            bool c;
            o1=new Element;
            cin>>val;
            o1->setValue(val);
            c=ll.removeFirstOccurrence(o1);
            cout<<c<<endl;
        }
        else if(ch==18)
        {
            Element *o1;
            int val;
            bool c;
            o1=new Element;
            cin>>val;
            o1->setValue(val);
            c=ll.removeLastOccurrence(o1);
            cout<<c<<endl;
        }
        else if(ch==19)
        {
            bool c;
            c=ll.isEmpty();
            cout<<c<<endl;
        }
        else if(ch==20)
        {
            ll.clear();
        }
        else if(ch==21)
        {
            string str;
            str=ll.toString();
            cout<<str<<endl;
        }
    }
    cout << ll.getSize() << endl;
    return 0;
}
